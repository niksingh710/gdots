#!/usr/bin/env bash

# This script is after `wal` script

check() {
  command -v "$1" &>/dev/null
}

notify() {
  if check notify-send; then
    setsid notify-send \
      --hint=string:x-dunst-stack-tag:wallpaper \
      --hint=string:synchronous:wallpaper \
      -a "Wal" \
      "$@" &>/dev/null
  else
    echo "$@"
  fi
}

checks() {
  [ ! -d "${HOME}/.cache/wal" ] && {
    notify "Error: wal cache not found" "Run 'wal' first"
    exit 1
  }
  check swww || {
    notify "Error: 'swww' command not found" "Install 'swww' package"
    exit 1
  }

  check convert || {
    notify "Error: 'convert' command not found" "Install 'imagemagick' package"
    exit 1
  }
}

wal_template_dir="${XDG_CACHE_HOME:-$HOME/.cache}/wal"
blur() {
  convert \
    -scale 10% \
    -blur 0x2.5 \
    -resize 1000% \
    "$current_wallpaper" \
    "$HOME/.cache/wal-blurr.png"
}

makoconfig() {
  check mako || {
    return
  }
  conffile="$HOME/.config/mako/config"
  dconffile="$HOME/.config/mako/config.default"

  # add config file to .gitignore so that wal will generate config from config.default everytime
  # declutters git

  if [ -f "$dconffile" ]; then
    cp "$dconffile" "$conffile"
  else
    notify "Error: Mako default config not found" "Make sure to check mako wal section in wiki"
    return
  fi

  # Associative array, color name -> color code.
  declare -A colors
  colors=(
    ["background-color"]="${background}89"
    ["text-color"]="$foreground"
    ["border-color"]="$color13"
  )

  for color_name in "${!colors[@]}"; do
    # replace first occurance of each color in config file
    sed -i "0,/^$color_name.*/{s//$color_name=${colors[$color_name]}/}" "$conffile"
  done
  # shellcheck disable=SC2154
  sed -i \
    "s/\(^format=.\{1,10\}color=\"\).\{4,9\}\(\".\{30,60\}color=\"\).\{4,9\}\(\".*\)/\1${color3}\2${cursor}\3/" \
    "$conffile"

  makoctl reload
}

theme() {
  # This function places the theme files in their respective directories
  # for kvantum, gradience and other applications
  template=pywal # name of the theme file
  theme=pywal    # name of the theme

  config_dir="${XDG_CONFIG_HOME:-$HOME/.config}"
  gradience_dir="$config_dir/presets/user/"

  kvantum_dir="$config_dir/Kvantum"
  kvtheme_dir="$kvantum_dir/${theme}"

  mkdir -p "$gradience_dir" "$kvantum_dir" "$kvtheme_dir"

  ln -sf "$wal_template_dir/${template}.json" "${gradience_dir}/${theme}.json"

  # copy kvantum theme
  ln -sf "$wal_template_dir/${template}.kvconfig" "$kvtheme_dir/${theme}.kvconfig"
  ln -sf "$wal_template_dir/${template}.svg" "$kvtheme_dir/${theme}.svg"

  /usr/bin/cp "$wal_template_dir/kdeglobals" "$config_dir/kdeglobals"

  check gradience-cli && gradience-cli apply -n $theme --gtk both || notify "Gradience" "Failed to apply pallete"
  check kvantummanager && kvantummanager --set "$theme" || notify "Kvantum" "Failed to apply theme"
}

ffox() {
  # firefox --setup
  check fd || {
    notify "Make sure fd is present"
    return
  }

  loc=$(fd -tf "^bg$" "$HOME/.mozilla")
  dir="$(dirname "$loc")"
  /usr/bin/cp "$current_wallpaper" "$loc"
  /usr/bin/cp "$current_wallpaper" "$dir/wallpaper.png"
  if [ -f "$HOME/.cache/wal-blurr.png" ]; then
    /usr/bin/cp "$HOME/.cache/wal-blurr.png" "$dir/wallpaper.png"
  fi
}

bar() {
  if [ -d "$HOME/.config/waybar" ] || mkdir -p "$HOME/.config/waybar"; then
    /usr/bin/cp "$wal_template_dir/colors-waybar.css" "$HOME/.config/waybar/colors.css"
  fi

  if check bar.sh; then
    bar.sh
  else
    killall waybar
    setsid waybar &>/dev/null
  fi
}

general() {
  check pywalfox && pywalfox update
  check walogram && walogram -f "$HOME/.cache/wal/colors.sh" -B -i "$current_wallpaper" # fixes for gif
  check pywal-discord && pywal-discord -p "$HOME/.config/vesktop/themes/"
  check tmux && tmux source-file "$HOME/.config/tmux/tmux.conf"
  check hyprctl && hyprctl reload
  check swaync && {
    pgrep -x swaync && {
      swaync-client -rs
      swaync-client -R
    }
  }
  ln -sf "$current_wallpaper" "$HOME/.wallpaper.png"

  if [ -d "$HOME/.config/zathura" ] || mkdir -p "$HOME/.config/zathura"; then
    /usr/bin/cp "$wal_template_dir/colors-zathura" "$HOME/.config/zathura/colors-zathura"
  fi
  if [ -d "$HOME/.config/btop/themes" ] || mkdir -p "$HOME/.config/btop/themes"; then
    /usr/bin/cp "$wal_template_dir/colors-btop.theme" "$HOME/.config/btop/themes/pywal.theme"
  fi
  if [ -d "$HOME/.config/heroic-theme" ] || mkdir -p "$HOME/.config/heroic-theme/"; then
    /usr/bin/cp "$wal_template_dir/heroic-theme.css" "$HOME/.config/heroic-theme/pywal.css"
  fi
  if [ -d "$HOME/.config/vimiv/styles/" ] || mkdir -p "$HOME/.config/vimiv/styles/"; then
    /usr/bin/cp "$wal_template_dir/colors-vimiv.ini" "$HOME/.config/vimiv/styles/pywal"
  fi
  if [ -d "$HOME/.config/qt5ct/colors/" ] || mkdir -p "$HOME/.config/qt5ct/colors/"; then
    /usr/bin/cp "$wal_template_dir/qt5ct.conf" "$HOME/.config/qt5ct/colors/pywal.conf"
  fi
  if [ -d "$HOME/.config/com.github.johnfactotum.Foliate/themes/" ] || mkdir -p "$HOME/.config/com.github.johnfactotum.Foliate/themes/"; then
    /usr/bin/cp "$wal_template_dir/foliate-pywal.json" "$HOME/.config/com.github.johnfactotum.Foliate/themes/foliate-pywal.json"
  fi

}

notify "After Wal" "Running..."

# shellcheck disable=SC1091
. "$HOME/.cache/wal/colors.sh"

current_wallpaper="$(cat $HOME/.cache/wal/wal)"
file_type=$(file -b --mime-type "$current_wallpaper")
if [[ "$file_type" == "image/gif" ]]; then
  convert "$current_wallpaper"[0] "$HOME/.cache/wal.gif.png"
  current_wallpaper="$HOME/.cache/wal.gif.png"
fi

checks || notify "Error" "Checks failed"
blur || notify "Error" "Blur failed"
theme || notify "Error" "Theme failed"
ffox || notify "Error" "Firefox failed"
general || notify "Error" "General failed"
bar || notify "Error" "Bar failed"
makoconfig

notify "Wallpaper set" "Wallpaper has been set to $(basename $current_wallpaper)" -i "$current_wallpaper"
